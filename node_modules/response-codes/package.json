{
  "name": "response-codes",
  "version": "0.0.1",
  "description": "Extends http.ServerResponse to include status code functions.",
  "keywords": [
    "http",
    "ServerResponse",
    "server",
    "response",
    "status",
    "codes",
    "extend"
  ],
  "author": {
    "name": "Brett Langdon",
    "email": "brett@blangdon.com"
  },
  "contributors": [],
  "engines": {
    "node": ">= 0.1.90"
  },
  "dependencies": {
    "http-status": "0.1.1"
  },
  "repository": {
    "type": "git",
    "url": "github.com/brettlangdon/node-response-codes.git"
  },
  "readme": "## Response Codes ##\n\nNode.JS module used to extend the functionality of http.ServerResponse to include functions to easily end a request by status code.\nThe module simply adds the following function for all common http status code numbers to the http.ServerResponse prototype.\n```\nfunction(message, headers){\n  this.writeHead(CODE, headers);\n  this.end(message);\n}\n```\n\n### Install\n```\nnpm install response-codes\n```\n\n### Usage\n```\nvar http = require('http');\nrequire('response-codes');\n\nhttp.createServer( function(req,res){\n  switch(req.url){\n  case '/':\n    res.OK('thanks');\n    break;\n  case '/private':\n    res.UNAUTHORIZED('STAY AWAY!');\n    break;\n  default:\n    res.NOT_FOUND('nothing to see here, move along');\n    break;\n  }\n}).listen(1337);\n\n```\n\nThis module also works with web frameworks such as Express.\n\n### Functions\n\nFunctions can be accessed by their name `res.OK('message');` as well as their status code `res[200]('message');`\n\n  * `100 - CONTINUE( message, headers )`\n  * `101 - SWITCHING_PROTOCOLS( message, headers )`\n  * `200 - OK( message, headers )`\n  * `201 - CREATED( message, headers )`\n  * `202 - ACCEPTED( message, headers )`\n  * `203 - NON_AUTHORITATIVE_INFORMATION( message, headers )`\n  * `204 - NO_CONTENT( message, headers )`\n  * `205 - RESET_CONTENT( message, headers )`\n  * `206 - PARTIAL_CONTENT( message, headers )`\n  * `300 - MULTITPLE_CHOICES( message, headers )`\n  * `301 - MOVED_PERMAMENTLY( message, headers )`\n  * `302 - FOUND( message, headers )`\n  * `303 - SEE_OTHER( message, headers )`\n  * `304 - NOT_MODIFIED( message, headers )`\n  * `305 - USE_PROXY( message, headers )`\n  * `307 - TEMPORARY_REDIRECT( message, headers )`\n  * `400 - BAD_REQUEST( message, headers )`\n  * `401 - UNAUTHORIZED( message, headers )`\n  * `402 - PAYMENT_REQUIRED( message, headers )`\n  * `403 - FORBIDDEN( message, headers )`\n  * `404 - NOT_FOUND( message, headers )`\n  * `405 - METHOD_NOT_ALLOWED( message, headers )`\n  * `406 - NOT_ACCEPTABLE( message, headers )`\n  * `407 - PROXY_AUTHENTICATION_REQUIRED( message, headers )`\n  * `408 - REQUEST_TIMEOUT( message, headers )`\n  * `409 - CONFLICT( message, headers )`\n  * `410 - GONE( message, headers )`\n  * `411 - LENGTH_REQUIRED( message, headers )`\n  * `412 - PRECONDITION_FAILED( message, headers )`\n  * `413 - REQUEST_ENTITY_TOO_LARGE( message, headers )`\n  * `414 - REQUEST_URI_TOO_LONG( message, headers )`\n  * `415 - UNSUPPORTED_MEDIA_TYPE( message, headers )`\n  * `416 - REQUESTED_RANGE_NOT_SATISFIABLE( message, headers )`\n  * `417 - EXPECTATION_FAILED( message, headers )`\n  * `500 - INTERNAL_SERVER_ERROR( message, headers )`\n  * `501 - NOT_IMPLEMENTED( message, headers )`\n  * `502 - BAD_GATEWAY( message, headers )`\n  * `503 - SERVICE_UNAVAILABLE( message, headers )`\n  * `504 - GATEWAY_TIMEOUT( message, headers )`\n  * `505 - HTTP_VERSION_NOT_SUPPORTED( message, headers )`",
  "readmeFilename": "README.md",
  "_id": "response-codes@0.0.1",
  "dist": {
    "shasum": "243c3421a346b9656e26a2149c2b5850795555ad"
  },
  "_from": "response-codes@",
  "_resolved": "https://registry.npmjs.org/response-codes/-/response-codes-0.0.1.tgz"
}
